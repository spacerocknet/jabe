package spacerock.utils

import scaldi.{Injector, Injectable}
import spacerock.cache.Redis.RedisWrapper
import scala.collection.mutable
import scala.util.Random

/**
 * Created by william on 2/24/15.
 */

trait IdGenerator {
  def generateNextId(key: String): Long
  def generateNextBlock(key: String, amount: Int): Set[Long]
}

/**
 * This class is for generating id, uid. It uses redis key internally.
 * UID is the 64-bit key, with customized random-increment integer as implemented in @method genIdFromLong
 * @param inj
 */
class UidGenerator (implicit inj: Injector) extends IdGenerator with Injectable {
  val rw: RedisWrapper = inject[RedisWrapper]
  val rnd: Random = Random
  final val SUFFIX_SEED_NUMBER: Int = 4096 // 12 bit
  final val PREFIX_SEED_NUMBER: Int = 8 // 3 bit ==> it should be a server identity
  final val HIGH_ORDER_BITS_FILTER: Long = 0x07FFFFFFFFFFF000L

  /**
   * Generate next id for a key.
   * @param key
   * @return
   */
  override def generateNextId(key: String): Long = {
    rw.getNextId(key)
  }

  /**
   * Generate next uid block for jabe server if needed
   * @param key redis key
   * @param amount amount of key will be generated
   * @return
   */
  override def generateNextBlock(key: String, amount: Int): Set[Long] = {
    val result: mutable.HashSet[Long] = new mutable.HashSet[Long]

    for (i <- 0 to amount) {
      result.add(genIdFromLong(rw.getNextId(key)))
    }
    result.toSet
  }

  /**
   * Generate customized uid with integer as an input
   * @param n increment integer
   * @return customized uid from input integer
   */
  private def genIdFromLong(n: Long): Long = {

    val num: Long = (n << 12) & HIGH_ORDER_BITS_FILTER
    val r1: Int = rnd.nextInt(SUFFIX_SEED_NUMBER)
    var r2: Long = rnd.nextInt(PREFIX_SEED_NUMBER)
    r2 = (r2 << 59)
    var res: Long = num | r2
    res = res & r1
    res
  }

  /**
   * Decode customized uid generated by @method genIdFromLong
   * @param n customized uid
   * @return real uid
   */
  def decodeId(n: Long): Long = {
    val res = n & HIGH_ORDER_BITS_FILTER
    res >> 12
  }
}

